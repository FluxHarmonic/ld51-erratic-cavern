(define-module (erratic game)
  (import (mesche math)
          (mesche string)
          (substratic font)
          (substratic input)
          (substratic renderer)
          (erratic door)
          (erratic item)
          (erratic world)
          (erratic utils)
          (erratic assets)
          (erratic player)
          (erratic patrol)
          (erratic positions)))

(define result-font nil)
(define prompt-font nil)
(define small-font nil)

(define title-text "Erratic Cavern!")
(define title-text-width nil)

(define win-text "You Win!")
(define win-text-width nil)

(define lose-text "You Lose!")
(define lose-text-width nil)

(define result-text nil)
(define result-text-width nil)
(define result-text-height 250)

(define prompt-text "Play Again? (Y/N)")
(define prompt-text-width nil)
(define prompt-text-height 175)

(define tile-size 64)
(define world-width 34)
(define world-height 18)
(define fade-color (rgba 0 0 0 150))

;; Define key bindings for gameplay
(define key-bindings
  (list (cons input-key-code-w 'player-move-up)
        (cons input-key-code-s 'player-move-down)
        (cons input-key-code-a 'player-move-left)
        (cons input-key-code-d 'player-move-right)))

(define world-data (read-world-data "assets/worlds/world1.txt"))

;; TODO: Store these in a record?
(define player nil)
(define patrols '())
(define items '())
(define doors '())
(define traps '())
(define world (create-world world-width
                            world-height
                            tile-size
                            world-data))
(define state nil)

(define (change-state! new-state)
  (set! state new-state)
  (if (eqv? state 'win)
      (begin (set! result-text win-text)
             (set! result-text-width win-text-width))
      (begin (set! result-text lose-text)
             (set! result-text-width lose-text-width))))

(define (reset-game-state!)
  ;; Reset game timers
  (set! time-until-randomize randomize-interval)
  (set! time-left-in-game 100)

  ;; Set the initial player position
  (let ((player-positions
         (gather-positions world-data
                           (lambda (tile-kind)
                             (eqv? tile-kind 5)))))
    (let ((start-position (position->world (car (list-take (positions-list player-positions)
                                                           (rand-int (positions-count player-positions))))
                                           world-width)))
      (set! player (create-player (car start-position)
                                  (cdr start-position)))))

  ;; Create the patrols
  (set! patrols '())
  (let loop ((max-patrols (+ 2 (rand-int 4)))
             (count 0))
    (if (< count max-patrols)
        (begin
          (set! patrols (cons (create-patrol 0 0)
                              patrols))
          (loop max-patrols
                (+ count 1)))))

  ;; Create initial entities and pick positions
  ;; TODO: Create a random list of items
  (set! items (list (create-item 'chalice (rgb 255 255 0))))

  ;; Create some number of locked doors and keys
  (let ((door-positions (world-door-positions world)))
    ;; Generate one less than the total number of door positions so that they
    ;; can actually move, but ensure that at least one door is generated!
    (if (> (positions-count door-positions) 0)
        (let ((num-doors (+ 1 (rand-int (- (positions-count door-positions) 2)))))
          (let loop ((count 0))
            (if (< count num-doors)
                (begin
                  (set! items (cons (create-item 'key (rgb 255 0 0))
                                    items))
                  (set! doors (cons (create-door) doors))
                  (loop (+ count 1))))))))

  ;; Randomize the position of all items and patrols
  (randomize-all-entities!)

  ;; The game is ready!
  (set! state 'playing))

(define (init-game) :export
  ;; Load assets
  (set! small-font (load-font 'small-font "assets/fonts/Thintel.ttf" 75))
  (set! result-font (load-font 'result-font
                               "assets/fonts/Thintel.ttf"
                               result-text-height))
  (set! prompt-font (load-font 'prompt-font
                               "assets/fonts/Thintel.ttf"
                               prompt-text-height))

  ;; Calculate reused text sizes
  (set! title-text-width (font-text-width result-font title-text))
  (set! win-text-width (font-text-width result-font win-text))
  (set! lose-text-width (font-text-width result-font lose-text))
  (set! prompt-text-width (font-text-width prompt-font prompt-text))

  ;; Reset the game state so it can begin
  (reset-game-state!))

(define randomize-interval 10)
(define time-until-randomize randomize-interval)
(define time-left-in-game 100)

(define (calculate-new-pos player delta-x delta-y)
  (cons (+ (player-x player) delta-x)
        (+ (player-y player) delta-y)))

(define (randomize-positions! entities valid-positions setter acceptable?)
  (let loop ((remaining entities)
             (positions (positions-list valid-positions))
             (num-positions (positions-count valid-positions)))
    (if (pair? remaining)
        (let ((take-result (list-take positions
                                      (rand-int num-positions))))
          (let ((new-pos (position->world (car take-result)
                                          world-width)))
            ;; Before using the position, make sure it is acceptable
            (if (or (not (function? acceptable? t))
                    (acceptable? (car new-pos)
                                 (cdr new-pos)))
                (begin
                  (setter (car remaining)
                          (car new-pos)
                          (cdr new-pos))

                  (loop (cdr remaining)
                        (cdr take-result)
                        (- num-positions 1)))
                ;; If the position wasn't acceptable, run the iteration again
                ;; for the same item and same positions list
                (loop remaining
                      positions
                      num-positions)))))))

(define (move-player player new-x new-y)
  ;; Set the new player position
  (player-x-set! player new-x)
  (player-y-set! player new-y)

  ;; Check if we walked over an item
  (set! items
        (let loop ((remaining items)
                   (new-items '()))
          (if (pair? remaining)
              (if (same-position? (player-x player)
                                  (player-y player)
                                  (item-x (car remaining))
                                  (item-y (car remaining)))
                  (begin
                    (if (eqv? 'chalice
                              (item-kind (car remaining)))
                        (change-state! 'win)
                        (begin
                          (player-items-set! player
                                             (cons (car remaining)
                                                   (player-items player)))))

                    ;; Since we found the item, return the items list
                    ;; without the touched item
                    (append new-items (cdr remaining)))

                  ;; Not at the same position, keep looping
                  (loop (cdr remaining)
                        (cons (car remaining)
                              new-items)))

              ;; Loop has ended, return the new item list
              (reverse new-items))))

  ;; TODO: Why is this necessary to make the item removal stick?
  (display "ITEMS: ")
  (display items)
  (display "\n")

  ;; TODO: Check if we walked over a trap

  ;; Move all patrols
  (map (lambda (patrol)
         (move-patrol patrol
                      (player-x player)
                      (player-y player)
                      (lambda (x y)
                        (is-passable? world x y nil))))
       patrols)

  ;; Check if the player is caught
  (map (lambda (patrol)
         (if (same-position? (player-x player)
                             (player-y player)
                             (patrol-x patrol)
                             (patrol-y patrol))
             (change-state! 'lose)))
       patrols))

(define (handle-game-input-event input-event) :export
  (if (eqv? state 'playing)
      ;; Handle game input
      (let ((binding (and (input-event-key-down? input-event)
                          (assq (input-event-key-code input-event)
                                key-bindings))))
        (if binding (handle-game-event (cdr binding))))

      ;; Handle prompt input
      (if (input-event-key-up? input-event)
          (if (eqv? input-key-code-y
                    (input-event-key-code input-event))
              ;; Start the game over!
              (reset-game-state!)

              ;; Quit the game
              (if (eqv? input-key-code-n
                        (input-event-key-code input-event))
                  (change-state! 'quit))))))

(define (is-passable? world x y has-key)
  ;; Check if the position is a wall or a door
  (and (world-is-passable? world x y)
       (let loop ((rest-doors doors))
         (if (null? rest-doors)
             t
             (if (not (same-position? x y
                                      (door-x (car rest-doors))
                                      (door-y (car rest-doors))))
                 (loop (cdr rest-doors))
                 ;; Does the player have a key
                 (if has-key
                     (begin
                       ;; Delete the door and return t because it is now
                       ;; passable
                       (display "DOORS BEFORE: ")
                       (display doors)
                       (display "\nDOORS AFTER: ")
                       (set! doors (delete (car rest-doors) doors))
                       (display doors)
                       (display "\n")
                       t)))))))

(define (handle-game-event event) :export
  (let ((new-pos
         (if (equal? event 'player-move-up)
             (calculate-new-pos player 0 -1)
             (if (equal? event 'player-move-down)
                 (calculate-new-pos player 0 1)
                 (if (equal? event 'player-move-left)
                     (calculate-new-pos player -1 0)
                     (if (equal? event 'player-move-right)
                         (calculate-new-pos player 1 0)))))))
    (if (pair? new-pos)
        (begin
          (if (is-passable? world
                            (car new-pos)
                            (cdr new-pos)
                            (memp (lambda (item)
                                    (eqv? 'key (item-kind item)))
                                  (player-items player)))
              (begin
                (move-player player
                             (car new-pos)
                             (cdr new-pos))))))))

(define (randomize-all-entities!)
  ;; Randomize patrol positions
  (randomize-positions! patrols
                        (world-floor-positions world)
                        (lambda (patrol x y)
                          (patrol-x-set! patrol x)
                          (patrol-y-set! patrol y))
                        (lambda (x y)
                          (not (is-close-to-position? (player-x player)
                                                      (player-y player)
                                                      x y
                                                      1))))

  ;; Randomize item positions
  (randomize-positions! items
                        (world-item-positions world)
                        (lambda (item x y)
                          (item-x-set! item x)
                          (item-y-set! item y))
                        (lambda (x y)
                          ;; TODO: Make sure we don't land on a door
                          (not (is-close-to-position? (player-x player)
                                                      (player-y player)
                                                      x y
                                                      3))))

  ;; Randomize the door positions
  (randomize-positions! doors
                        (world-door-positions world)
                        (lambda (door x y)
                          (door-x-set! door x)
                          (door-y-set! door y))
                        (lambda (x y) t)))

(define (update-game time-delta) :export
  (if (eqv? state 'quit)
      ;; If we're in the quit state, exit the loop by returning nil
      nil
      (begin
        (if (eqv? state 'playing)
            (begin
              ;; Update the randomization timer
              (set! time-until-randomize
                    (- time-until-randomize time-delta))

              ;; Update the game timer
              (set! time-left-in-game (max 0
                                           (- time-left-in-game
                                              time-delta)))

              ;; Is the game over?
              (if (eqv? time-left-in-game 0)
                  (change-state! 'lose))

              ;; If it's time to randomize, do it
              (if (< time-until-randomize 0)
                  (begin
                    ;; Randomize item positions
                    (randomize-all-entities!)

                    ;; Reset the timer
                    (set! time-until-randomize randomize-interval)))))

        ;; Continue running the game loop
        t)))

(define (world->screen offset-x offset-y)
  (lambda (x y)
    (cons (+ offset-x (* x tile-size))
          (+ offset-y (* y tile-size)))))

(define (render-text-centered renderer
                              font
                              text
                              x y
                              text-width text-height)
  (render-text renderer
               font
               text
               (- x (/ text-width 2))
               (- y (/ text-height 2))))

(define (render-game renderer window-width window-height) :export
  (let ((world-x (- (/ window-width 2)
                    (/ (world-pixel-width world) 2)))
        (world-y (- (/ window-height 2)
                    (/ (world-pixel-height world) 2))))
    ;; Render the game world
    (render-world renderer
                  world
                  world-x
                  world-y)

    ;; Render the items
    (map (lambda (item)
           (render-item renderer
                        item
                        (world->screen world-x world-y)
                        tile-size))
         items)

    ;; Render the inventory
    (let ((x 350))
      (map (lambda (item)
             (render-item renderer
                          item
                          (lambda (world-x world-y)
                            (set! x (+ (+ x tile-size) 5))
                            (cons x (- window-height 131)))
                          tile-size))
           (player-items player)))

    ;; Render the patrols
    (map (lambda (patrol)
           (render-patrol renderer
                          patrol
                          (world->screen world-x world-y)
                          tile-size))
         patrols)

    ;; Render the doors
    (map (lambda (door)
           (render-door renderer
                        door
                        (world->screen world-x world-y)
                        tile-size))
         doors)

    ;; Render the player
    (render-player renderer
                   player
                   (world->screen world-x world-y)
                   tile-size)

    ;; Render the randomization timer
    (renderer-draw-rect renderer
                        world-x
                        (- window-height 125)
                        (* 200 (max 0 (/ time-until-randomize
                                         randomize-interval)))
                        50
                        (rgb 255 0 255))

    ;; Draw the time remaining right-aligned under the map
    (let ((time-text
           (string-append "Time Remaining: "
                          (number->string time-left-in-game))))
      (render-text renderer
                   small-font
                   time-text
                   (- (- window-width
                         (font-text-width small-font time-text))
                      world-x)
                   (- window-height 90)))

    ;; Draw the game state prompt if necessary
    (if (not (eqv? state 'playing))
        (begin
          ;; Fade the screen a little
          (renderer-draw-rect renderer
                              0 0
                              window-width
                              window-height
                              fade-color)

          ;; Draw the result text
          (render-text-centered renderer
                                result-font
                                result-text
                                (/ window-width 2)
                                (/ window-height 2)
                                result-text-width
                                result-text-height)

          ;; Draw the prompt
          (render-text-centered renderer
                                prompt-font
                                prompt-text
                                (/ window-width 2)
                                (+ 100 (/ window-height 2))
                                prompt-text-width
                                prompt-text-height)))))
